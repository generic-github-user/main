fn replace<T> (values: Collection<T>, a: T, b: T) -> Collection<T> {
    return values.map(x => x == a ? b : x)
}

fn Add<T> (a: T, b: T) -> T {
    return match T {
        // can we make this more generic (perhaps add some construct for
        // distributivity? or define by indices, i.e. c[i] = a[i] + b[i])
        Iterator => zip(a, b).map(ai, bi => ai + bi)
        String => String.cat(a, b)
        Number => a + b

        _ => raise error.notimplemented
    }
}

fn Eq<T> (a: T, b: T) -> bool {
    return match T {
        Iterator => zip(a, b).map(ai, bi => ai == bi).all()
        Number => a + b
        _ => raise error.notimplemented
    }
}


fn flatten(values: Collection<T | Collection>) -> Collection<T> {
    result = values.type.new()
    values.map(v => typecase v {
        T => result.append(v)
        Collection => result.extend(flatten(v))
    })
    return result
}
flatten.tests {
    test.catch(flatten(1), error.type)
    test(flatten([42]) == [42])
    test(flatten([]) == [])
    test(flatten([[1, 2], 3, [[4, 5], [6, 7]]]) == [1, 2, 3, 4, 5, 6, 7])
    test(flatten(Set.new()) == Set.new())
}

fn Iterator.product<T, V> (a: Iterator<T>, b: Iterator<V>) ->
    Iterator<(T, V); length == a.length * b.length> {
    // return Iterator { }
    return Iterator.chain(a.map(ai => b.map(bi => (ai, bi))))
}

println(Sequence.methods)

trait PartialEq {}

trait Eq {
    // tags : { symmetric, transitive, reflexive }
    pub fn eq <T> (a: T, b: T) -> bool
    optional pub fn neq <T> (a: T, b: T) -> bool
    // eq(x, y) == !neq(x, y)
}

// interpret refinement types as subtypes?
// e.g., T: Vec
// "subclassing" functions?

pub fn linalg.dot <T: Number> (a: Vec<T>, b: Vec<T>) where a.length == b.length
    -> Vec<T; .length == a.length == b.length> {
    complexity { time: O(n) }

    // return (a * b).sum()
    return zip(a, b).map(T.mul).sum()
}

pub mut fn Sequence.shuffle <T> (values: Sequence<T>) ->
    Sequence<T; .length == values.length> {
    complexity { time: O(n) }

    ((n-1)..1).each(i => {
        let j = random.int(0, i+1)
        values.swap(i, j)
    })
    return values
}

pub fn Sequence.shuffled <T> (values: Sequence<T>) ->
    Sequence<T; .length == values.length> {
    complexity { time: O(n) }

    return values.clone().shuffle()
}
// Sequence.shuffled = cloner(Sequence.shuffle)


@memoize
pub fn math.factorial (x : Number) -> Number {
    range(1, x+1).product()
}


type Vec<T> : Collection {
    data: Array<T; data.length == length>
    length: uint
    capacity: uint >= length

    pub fn new (init_capacity:uint=128) -> Vec<T> {
        return Vec {
            data: malloc(init_capacity * T.size).cast(Array<T>)
            length: 0
            capacity: init_capacity
        }
    }

    // Deallocates the buffer associated with this vector
    pub mut fn free (self) -> None {
        self.data.free()
        self.{length, capacity} = 0
        return None
    }

    pub fn iter (self) -> Iterator<Option<T>; .length == self.length> {
        return Iterator {
            index: 0
            next: () => {
                return
                    if index < self.length : Some(self[index++])
                    else : None
            }
        }
    }

    pub mut fn push (self, value: T) -> Vec<T; length == self.length + 1> {
        complexity { time: O(1) }

        if (self.capacity - self.length) < 16 {
            let new_capacity = self.capacity + 128
            self.data = realloc(self.data, new_capacity)
            self.capacity = new_capacity
        }
        self[self.length ++] = value
        return self
    }

    pub mut fn pop (self) -> Option<T> {
        complexity { time: O(1) }

        if self.length > 0 : return Some(self[-- self.length])
        else : return None
    }

    pub mut fn empty (self) -> Vec<T> {
        complexity { time: O(1) }
        self.length = 0
        self
    }

    pub mut fn remove (self, i: uint) -> Vec<T> {
        complexity { time: O(n) }
        let value = self[i]
        range(i, self.length).each(j => {
            self[j] = self[j + 1]
        })
        self.length --
        value
    }

    pub fn cast (self, Q<.size == T.size>) -> Vec<Q> {
        complexity { time: O(1) }
        return Vec {
            data: self.data.cast(Array<Q>)
            length: self.length
            capacity: self.capacity
        }
    }

    pub fn len (self) -> uint {
        complexity { time: O(1) }
        self.length
    }

    // may or may not be based on
    // https://doc.rust-lang.org/src/alloc/vec/mod.rs.html#1961
    pub fn is_empty (self) -> bool {
        self.len() == 0
    }
}
