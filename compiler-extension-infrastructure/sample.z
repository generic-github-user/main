filters: {
	infer_types,
	types: {
		strings,
		booleans,
		uint,
		list,
		set,
		range
	},
	syntax: {
		ranges,
		lambdas,
		doc_comments,
    decorators
	},
	negative_indices,
	implicit_return,
	implicit_block,
	keywords: {
		fn,
		pub
	},
  macros: {
    typecase
  },
	refinement_types,
	generics,
	methods: {
		list: print,
		iterator: {
			filter,
			map
		},
		len,
		to_string
	},
	for_in,
	plain_conditions,
	semantics: {
		function_overloading,
		implicit_dereference
	},
	lint: {
		style
	}
}


/// returns true if the string `s` is equivalent to its reverse
@memoize
pub fn bool is_palindrome(string s) {
	for i in 0..(s.len()/2) {
		if s[i] != s[-i] return false
	}
	return true
}

// a more compact functional version of the same function; works on other types
// of sequences than strings
fn is_palindrome_2(s) = s => 0..(s.len/2).map(i => s[i] == s[-i]).all()

is_palindrome.tests {
    test(is_palindrome('kayak'))
    test(!is_palindrome('canoe'))
    test(is_palindrome([]))
    test(is_palindrome([1, 3, 1]))
    test(!is_palindrome([1, 2]))
}

fn is_palindrome_3(s) = s => s == s.reversed()

println(std.reserved_words)
