"use strict";window.cs={"networks":[],"settings":{"node_types":[{"name":"Input"},{"name":"Output"},{"name":"Value"},{"name":"Addition"},{"name":"Multiplication"},{"name":"Tanh"},{"name":"Sine"},{"name":"Cosine"},{"name":"Abs"}]}};cs.caesium=function(){console.log("%c\
    _____            ______   _____  _____  _    _  __  __   \n\
   / ____|    /\\    |  ____| / ____||_   _|| |  | ||  \\/  |  \n\
  | |        /  \\   | |__   | (___    | |  | |  | || \\  / |  \n\
  | |       / /\\ \\  |  __|   \\___ \\   | |  | |  | || |\\/| |  \n\
  | |____  / ____ \\ | |____  ____) | _| |_ | |__| || |  | |  \n\
   \\_____|/_/    \\_\\|______||_____/ |_____| \\____/ |_|  |_|  \n\
                                                             \
","background: #e8efff; color: #4319ff; font-weight: 1000;")}
cs.alias=function(variable){window[variable]=cs}
cs.random=function(minimum,maximum){if(minimum==undefined&&maximum==undefined){return Math.random()}else{return minimum+(Math.random()*(maximum-minimum))}}
cs.random_item=function(array){return array[Math.floor(Math.random()*array.length)]}
cs.clone=function(object){var copy;if(null==object||"object"!=typeof object)return object;if(object instanceof Date){copy=new Date();copy.setTime(object.getTime());return copy}
if(object instanceof Array){copy=[];for(var i=0,len=object.length;i<len;i++){copy[i]=cs.clone(object[i])}
return copy}
if(object instanceof Object){copy={};for(var attr in object){if(object.hasOwnProperty(attr))copy[attr]=cs.clone(object[attr])}
return copy}
throw new Error("Unable to copy obj! Its type isn't supported.")}
cs.clone_2=function(object){return JSON.parse(JSON.stringify(object))}
cs.clone_network=function(network){var cloned=cs.clone(network);cloned.id=cs.UUID();return cloned}
cs.get_network=function(id){return cs.networks.find(x=>x.id==id)}
cs.difference=function(array_1,array_2){return array_2.map((element,i)=>{return element-array_1[i]})}
cs.sum=function(array){var sum=0;for(var i=0;i<array.length;i++){sum+=array[i]};return sum}
cs.average=function(array){return cs.sum(array)/array.length}
cs.remove=function(array,element){var index=array.indexOf(element);if(index!=-1){array.splice(index,1)}}
cs.min_max=function(variable){var num;if(variable instanceof Array){num=cs.random(variable[0],variable[1])}else if(variable instanceof Object){num=cs.random(variable.min,variable.max)}else if(typeof(variable)=="number"){num=variable}
return num}
cs.map=function(num,in_min,in_max,out_min,out_max){return(num-in_min)*(out_max-out_min)/(in_max-in_min)+out_min}
cs.apply=function(array,func){return array.map(x=>func(x))}
cs.encode={};cs.decode={};cs.encode.integer=function(input,charset,length){var output=[];for(var i=0;i<length;i++){output.push(charset.indexOf(input[i]))}
return output}
cs.decode.integer=function(input,charset){var output="";for(var i=0;i<input.length;i++){var character=charset[input[i]];if(!character){character=""}
output+=character}
return output}
cs.encode.one_hot=function(input,charset,length){var output=[];for(var i=0;i<length;i++){charset.forEach(char=>{if(input[i]==char){output.push(1)}
else{output.push(0)}})}
return output}
cs.decode.one_hot=function(input,charset){var output="";for(var i=0;i<input.length/charset.length;i++){var max=0;for(var j=0;j<charset.length;j++){if(input[(charset.length*i)+j]>input[max]){max=j}}
output+=charset[(charset.length*i)+max]}
return output}
cs.node_types=function(name){console.error("Node type "+name+" does not exist. Please select a node type from the list of supported node types.");console.log("Supported node types:");for(var i=2;i<cs.settings.node_types.length;i++){console.log(cs.settings.node_types[i].name)}}
cs.help=function(thing){if(thing==undefined){console.log("Find documentation for Caesium on the GitHub page.","https://github.com/generic-github-user/Caesium");console.log("Use either cs.help(function) or function.help() to get help with a specific Caesium function.");console.log("Full list of available help commands:");console.log("cs.node.help()");console.log("cs.connection.help()");console.log("cs.network.help()")}else{thing.help()}}
cs.UUID=function(){function s4(){return Math.floor((1+Math.random())*0x10000).toString(16).substring(1)}
var id=s4()+s4()+"-"+s4()+"-"+s4()+"-"+s4()+"-"+s4()+s4()+s4();return id}
cs.node=class{constructor(config){if(config==undefined){console.error("Please provide a config object.")}
else if(config.type==undefined){console.error("Please provide a node type.")}
else{this.type=config.type;if(this.type=="Value"){if(config.value==undefined){config.value=1}
this.value=cs.min_max(config.value)}else{this.value=0}}}}
cs.connection=class{constructor(config){if(config==undefined){console.error("Please provide a config object.")}
else if(config.source==undefined){console.error("Please provide a source node for the connection.")}else if(config.destination==undefined){console.error("Please provide a config object.")}
else{if(config.weight==undefined){config.weight=1}
this.id=cs.UUID();this.weight=cs.min_max(config.weight);this.source=config.source;this.destination=config.destination}}}
cs.network=class{constructor(config){this.id=cs.UUID();this.nodes={};this.connections=[];this.node_inputs=[];this.node_outputs=[];this.score=0;this.node_types={};for(var i=0;i<cs.settings.node_types.length;i++){this.node_types[cs.settings.node_types[i].name]=[]}
this.add_node=function(config){if(config==undefined){console.error("Please provide a config object.")}else{var id=cs.UUID();var node=new cs.node(config);this.nodes[id]=node;if(node.type=="Input"||node.type=="Value"){this.node_outputs.push(id)}
else{this.node_inputs.push(id);this.node_outputs.push(id)}
this.node_types[node.type].push(id)}}
for(var attr in config.nodes){var node_type=cs.settings.node_types.find(x=>x.name==attr);if(node_type!=undefined){for(var i=0;i<Math.round(cs.min_max(config.nodes[attr].num));i++){this.add_node({"type":attr,"value":config.nodes[attr].init})}}
else{cs.node_types(attr)}}
this.find_connection=function(id){var connection=this.connections.find(x=>x.id==id);if(!connection){console.error("Connection with id "+id+" could not be found.")}
else{return connection}}
this.add_connection=function(config){if(config==undefined){console.error("Please provide a config object.")}else{this.connections.push(new cs.connection({"weight":config.weight,"source":cs.random_item(this.node_outputs),"destination":cs.random_item(this.node_inputs)}))}}
this.remove_node=function(config){if(config==undefined){console.error("Please provide a config object.")}else if(config.id==undefined){console.error("Missing ID of node to remove from network.")}else{var id=config.id;delete this.nodes[id];for(var attr in this.node_types){cs.remove(this.node_types[attr],id)}
cs.remove(this.node_inputs,id);cs.remove(this.node_outputs,id);var dead_connections=this.connections.filter(x=>x.source==id).concat(this.connections.filter(x=>x.destination==id));for(var i=0;i<dead_connections.length;i++){cs.remove(this.connections,dead_connections[i])}}}
this.remove_connection=function(config){if(config==undefined){console.error("Please provide a config object.")}else if(config.id==undefined){console.error("Missing ID of connection to remove from network.")}else{this.connections.splice(this.connections.indexOf(this.find_connection(config.id)),1)}}
for(var i=0;i<Math.round(cs.min_max(config.connections.num));i++){this.add_connection({"weight":config.connections.init})}
this.set_inputs=function(config){if(config.inputs==undefined){console.error("Inputs for the network must be provided.")}else{var num_inputs=this.node_types.Input.length;if(config.inputs.length<num_inputs){console.error("The number of inputs you have provided ("+config.inputs.length+") is fewer than the number of input nodes in the network ("+num_inputs+"). Please provide "+num_inputs+" inputs.");return!1}else if(config.inputs.length>num_inputs){console.error("The number of inputs you have provided ("+config.inputs.length+") is greater than the number of input nodes in the network ("+num_inputs+"). Please provide "+num_inputs+" inputs.");return!1}else if(config.inputs.length==num_inputs){for(var i=0;i<config.inputs.length;i++){this.nodes[this.node_types.Input[i]].value=config.inputs[i]}
return this}}}
this.get_outputs=function(){var outputs=[];for(var i=0;i<this.node_types.Output.length;i++){outputs.push(this.nodes[this.node_types.Output[i]].value)}
return outputs}
this.reset=function(){for(var attr in this.nodes){var node=this.nodes[attr];if(node.type!="Value"){node.value=0}}
return this}
this.update=function(config){if(config==undefined){config={}}
if(config.iterations==undefined){config.iterations=1}
else if(typeof(config.iterations)!="number"){console.error("Number of iterations must be a number.");config.iterations=1}
if(config.limit==undefined){config.limit={}}
if(config.limit.min==undefined){config.limit.min=-1e10}
if(config.limit.max==undefined){config.limit.max=1e10}
if(config.buffer==undefined){config.buffer=!0}
if(config.logs==undefined){config.logs=!1}
for(var i=0;i<config.iterations;i++){if(config.buffer){var network_buffer={}}
for(var attr in this.nodes){var node=this.nodes[attr];if(config.buffer){network_buffer[attr]=node.value}
var type=node.type;if(type=="Output"||type=="Addition"||type=="Tanh"||type=="Sine"||type=="Cosine"||type=="Abs"){node.value=0}
else if(type=="Multiplication"){node.value=1}}
for(var j=0;j<this.connections.length;j++){var type=this.nodes[this.connections[j].destination].type;var input_value;if(config.buffer){input_value=network_buffer[this.connections[j].source]}else{input_value=this[this.connections[j].source].value}
input_value*=this.connections[j].weight;if(type=="Output"||type=="Addition"||type=="Tanh"||type=="Sine"||type=="Cosine"||type=="Abs"){this.nodes[this.connections[j].destination].value+=input_value}
else if(type=="Multiplication"){this.nodes[this.connections[j].destination].value*=input_value}}
for(attr in this.nodes){var node=this.nodes[attr];if(node.type=="Tanh"){node.value=Math.tanh(node.value)}else if(node.type=="Sine"){node.value=Math.sin(node.value)}else if(node.type=="Cosine"){node.value=Math.cos(node.value)}else if(node.type=="Abs"){node.value=Math.abs(node.value)}
if(node.type=="Multiplication"&&node.value==1){node.value=0}
if(node.value==NaN||node.value<config.limit.min||node.value>config.limit.max){node.value=0}}
if(config.logs){console.log("Iteration "+(i+1)+" complete.",this)}}
if(config.logs){console.log("Node values updated for "+config.iterations+" iterations.",this)}
return this}
this.evaluate=function(config){if(config.input==undefined){console.error("No config object was provided.")}else{this.reset();this.set_inputs({"inputs":config.input});this.update(config.update);return this.get_outputs()}}
this.mutate=function(config){if(config==undefined){var config={}}
if(config.mutation_rate==undefined){config.mutation_rate=0.5}
if(config.mutation_size==undefined){config.mutation_size=0.1}
for(var i=0;i<config.iterations;i++){for(var attr in config.nodes){var node_type=cs.settings.node_types.find(x=>x.name==attr);if(node_type!=undefined){for(var j=0;j<Math.round(cs.min_max(config.nodes[attr].add));j++){if(this.node_types[node_type.name].length<config.nodes[attr].limit){this.add_node({"type":attr,"value":config.nodes[attr].init})}}
for(var j=0;j<Math.round(cs.min_max(config.nodes[attr].remove));j++){if(this.node_types[node_type.name].length>0){this.remove_node({"id":cs.random_item(this.node_types[node_type.name])})}}}
else{cs.node_types(attr)}}
for(var j=0;j<this.node_types.Value.length;j++){if(cs.random()<config.nodes.Value.value.mutation_rate){this.nodes[this.node_types.Value[j]].value+=cs.random(-config.nodes.Value.value.mutation_size,config.nodes.Value.value.mutation_size)}}
for(var j=0;j<Math.round(cs.min_max(config.connections.add));j++){if(this.connections.length<config.connections.limit){this.add_connection({"weight":config.connections.init})}}
for(var j=0;j<Math.round(cs.min_max(config.connections.remove));j++){if(this.connections.length>0){this.remove_connection({"id":cs.random_item(this.connections).id})}}
for(var j=0;j<this.connections.length;j++){if(cs.random()<config.connections.value.mutation_rate){this.connections[j].weight+=cs.random(-config.connections.value.mutation_size,config.connections.value.mutation_size)}}}
return this};this.evolve=function(config){var start_time=performance.now();if(config.log){console.log("Training network.",this)}
if(config.update==undefined){config.update={"iterations":1,"limit":{"min":-10e9,"max":10e9}}}
if(config.evaluate==undefined){config.evaluate=function(network,input,output){return network.evaluate({"input":input,"update":config.update})}}
var network=this;for(var i=0;i<config.iterations;i++){var population=new Array(config.population);for(var j=0;j<population.length;j++){population[j]=cs.clone(network)}
for(var j=0;j<population.length;j++){population[j].mutate(config.mutate);population[j].score=0;for(var r=0;r<config.inputs.length;r++){var y=config.evaluate(population[j],config.inputs[r],config.outputs[r]);population[j].score+=cs.average(cs.apply(cs.difference(y,config.outputs[r]),Math.abs))/config.inputs.length}}
var best_network=population[0];for(var j=0;j<population.length;j++){if(population[j].score<best_network.score){best_network=population[j]}}
network=cs.clone(best_network);if(config.log){console.log("Iteration "+(i+1)+" complete.",network.score,network)}}
var end_time=performance.now();if(config.log){console.log(config.iterations+" training iterations complete in "+Math.round(end_time-start_time)+" milliseconds.",network)}
if(config.return=="all"){return{"population":population,"network":network}}else{return network}}
cs.networks.push(this)}}
